---
title: "Random Forest Challenge"
subtitle: "The Power of Weak Learners"
format:
  html: default
execute:
  echo: false
  eval: true
---

# üå≤ Random Forest Challenge - The Power of Weak Learners

::: {.callout-important}
## üìä Challenge Requirements In [Student Analysis Section](#student-analysis-section)

Navigate to the [Student Analysis Section](#student-analysis-section) to see the challenge requirements.

:::

::: {.callout-important}
## üéØ Note on Python Usage

You have not been coached through setting up a Python environment.  **If using Python** You will need to set up a Python environment and install the necessary packages to run this code - takes about 15 minutes; see [https://quarto.org/docs/projects/virtual-environments.html](https://quarto.org/docs/projects/virtual-environments.html).  Alternatively, delete the Python code and only leave the remaining R code that is provided.  You can see the executed Python output at my GitHub pages site: [https://flyaflya.github.io/randomForestChallenge/](https://flyaflya.github.io/randomForestChallenge/).

:::

## The Problem: Can Many Weak Learners Beat One Strong Learner?

**Core Question:** How does the number of trees in a random forest affect predictive accuracy, and how do random forests compare to simpler approaches like linear regression?

**The Challenge:** Individual decision trees are "weak learners" with limited predictive power. Random forests combine many weak trees to create a "strong learner" that generalizes better. But how many trees do we need? Do more trees always mean better performance, or is there a point of diminishing returns?

**Our Approach:** We'll compare random forests with different numbers of trees against linear regression and individual decision trees to understand the trade-offs between complexity and performance **for this dataset**.

::: {.callout-warning}
## ‚ö†Ô∏è AI Partnership Required

This challenge pushes boundaries intentionally. You'll tackle problems that normally require weeks of study, but with Cursor AI as your partner (and your brain keeping it honest), you can accomplish more than you thought possible.

**The new reality:** The four stages of competence are Ignorance ‚Üí Awareness ‚Üí Learning ‚Üí Mastery. AI lets us produce Mastery-level work while operating primarily in the Awareness stage. I focus on awareness training, you leverage AI for execution, and together we create outputs that used to require years of dedicated study.
:::

## Data and Methodology

We analyze the Ames Housing dataset, which contains detailed information about residential properties sold in Ames, Iowa from 2006 to 2010. This dataset is ideal for our analysis because:

- **Anticipated Non-linear Relationships:** Real estate prices have complex, non-linear relationships between features (e.g., square footage in wealthy vs. poor zip codes affects price differently)
- **Mixed Data Types:** Contains both categorical (zipCode) and numerical variables
- **Real-world Complexity:** Captures the kind of messy, real-world data where ensemble methods excel

Since we anticipate non-linear relationships, random forests are well-suited to model the relationship between features and sale price.

### Python

```{python}
#| label: load-and-model-python
#| echo: false

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

# Load data
sales_data = pd.read_csv("https://raw.githubusercontent.com/flyaflya/buad442Fall2025/refs/heads/main/datasets/salesPriceData.csv")

# Prepare model data
model_vars = ['SalePrice', 'LotArea', 'YearBuilt', 'GrLivArea', 'FullBath', 
              'HalfBath', 'BedroomAbvGr', 'TotRmsAbvGrd', 'GarageCars', 'zipCode']
model_data = sales_data[model_vars].dropna()

# Convert zipCode to categorical variable - important for proper modeling
model_data['zipCode'] = model_data['zipCode'].astype('category')

# Split data
X = model_data.drop('SalePrice', axis=1)
y = model_data['SalePrice']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=123)

# Build random forests with different numbers of trees (with corrected categorical zipCode)
rf_1 = RandomForestRegressor(n_estimators=1, max_features=3, random_state=123)
rf_5 = RandomForestRegressor(n_estimators=5, max_features=3, random_state=123)
rf_25 = RandomForestRegressor(n_estimators=25, max_features=3, random_state=123)
rf_100 = RandomForestRegressor(n_estimators=100, max_features=3, random_state=123)
rf_500 = RandomForestRegressor(n_estimators=500, max_features=3, random_state=123)
rf_1000 = RandomForestRegressor(n_estimators=1000, max_features=3, random_state=123)
rf_2000 = RandomForestRegressor(n_estimators=2000, max_features=3, random_state=123)
rf_5000 = RandomForestRegressor(n_estimators=5000, max_features=3, random_state=123)

# Fit all models
rf_1.fit(X_train, y_train)
rf_5.fit(X_train, y_train)
rf_25.fit(X_train, y_train)
rf_100.fit(X_train, y_train)
rf_500.fit(X_train, y_train)
rf_1000.fit(X_train, y_train)
rf_2000.fit(X_train, y_train)
rf_5000.fit(X_train, y_train)
```

## Results: The Power of Ensemble Learning

Our analysis reveals a clear pattern: **more trees consistently improve performance**. Let's examine the results and understand why this happens.

### Performance Trends

### Python

```{python}
#| label: performance-comparison-python
#| echo: false
#| fig-width: 7
#| fig-height: 5
#| out.width: 90%

# Calculate predictions for test data
predictions_1_test = rf_1.predict(X_test)
predictions_5_test = rf_5.predict(X_test)
predictions_25_test = rf_25.predict(X_test)
predictions_100_test = rf_100.predict(X_test)
predictions_500_test = rf_500.predict(X_test)
predictions_1000_test = rf_1000.predict(X_test)
predictions_2000_test = rf_2000.predict(X_test)
predictions_5000_test = rf_5000.predict(X_test)

# Calculate predictions for training data
predictions_1_train = rf_1.predict(X_train)
predictions_5_train = rf_5.predict(X_train)
predictions_25_train = rf_25.predict(X_train)
predictions_100_train = rf_100.predict(X_train)
predictions_500_train = rf_500.predict(X_train)
predictions_1000_train = rf_1000.predict(X_train)
predictions_2000_train = rf_2000.predict(X_train)
predictions_5000_train = rf_5000.predict(X_train)

# Calculate performance metrics for test data
rmse_1_test = np.sqrt(mean_squared_error(y_test, predictions_1_test))
rmse_5_test = np.sqrt(mean_squared_error(y_test, predictions_5_test))
rmse_25_test = np.sqrt(mean_squared_error(y_test, predictions_25_test))
rmse_100_test = np.sqrt(mean_squared_error(y_test, predictions_100_test))
rmse_500_test = np.sqrt(mean_squared_error(y_test, predictions_500_test))
rmse_1000_test = np.sqrt(mean_squared_error(y_test, predictions_1000_test))
rmse_2000_test = np.sqrt(mean_squared_error(y_test, predictions_2000_test))
rmse_5000_test = np.sqrt(mean_squared_error(y_test, predictions_5000_test))

# Calculate performance metrics for training data
rmse_1_train = np.sqrt(mean_squared_error(y_train, predictions_1_train))
rmse_5_train = np.sqrt(mean_squared_error(y_train, predictions_5_train))
rmse_25_train = np.sqrt(mean_squared_error(y_train, predictions_25_train))
rmse_100_train = np.sqrt(mean_squared_error(y_train, predictions_100_train))
rmse_500_train = np.sqrt(mean_squared_error(y_train, predictions_500_train))
rmse_1000_train = np.sqrt(mean_squared_error(y_train, predictions_1000_train))
rmse_2000_train = np.sqrt(mean_squared_error(y_train, predictions_2000_train))
rmse_5000_train = np.sqrt(mean_squared_error(y_train, predictions_5000_train))

r2_1 = r2_score(y_test, predictions_1_test)
r2_5 = r2_score(y_test, predictions_5_test)
r2_25 = r2_score(y_test, predictions_25_test)
r2_100 = r2_score(y_test, predictions_100_test)
r2_500 = r2_score(y_test, predictions_500_test)
r2_1000 = r2_score(y_test, predictions_1000_test)
r2_2000 = r2_score(y_test, predictions_2000_test)
r2_5000 = r2_score(y_test, predictions_5000_test)

# Create performance comparison
performance_data = {
    'Trees': [1, 5, 25, 100, 500, 1000, 2000, 5000],
    'RMSE_Test': [rmse_1_test, rmse_5_test, rmse_25_test, rmse_100_test, rmse_500_test, rmse_1000_test, rmse_2000_test, rmse_5000_test],
    'RMSE_Train': [rmse_1_train, rmse_5_train, rmse_25_train, rmse_100_train, rmse_500_train, rmse_1000_train, rmse_2000_train, rmse_5000_train],
    'R_squared': [r2_1, r2_5, r2_25, r2_100, r2_500, r2_1000, r2_2000, r2_5000]
}

performance_df = pd.DataFrame(performance_data)
print(performance_df)
```

```{python}
#| label: power-of-trees-visualizationV2
#| echo: false
#| fig-width: 7
#| fig-height: 5

# Create the visualization showing the power of more trees
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7, 5))

# Plot 1: RMSE vs Number of Trees
ax1.plot(performance_df['Trees'], performance_df['RMSE_Train'], 'o-', label='Training RMSE', linewidth=2, markersize=6)
ax1.plot(performance_df['Trees'], performance_df['RMSE_Test'], 's-', label='Test RMSE', linewidth=2, markersize=6)
ax1.set_xlabel('Number of Trees')
ax1.set_ylabel('RMSE')
ax1.set_title('RMSE vs Number of Trees')
ax1.set_xscale('log')
ax1.grid(True, alpha=0.3)
ax1.legend()
ax1.set_xlim(0.8, 6000)

# Plot 2: R-squared vs Number of Trees
ax2.plot(performance_df['Trees'], performance_df['R_squared'], 'o-', color='green', linewidth=2, markersize=6)
ax2.set_xlabel('Number of Trees')
ax2.set_ylabel('R-squared')
ax2.set_title('R-squared vs Number of Trees')
ax2.set_xscale('log')
ax2.grid(True, alpha=0.3)
ax2.set_xlim(0.8, 6000)

plt.tight_layout()
plt.show()
```

## Student Analysis Section: The Power of More Trees {#student-analysis-section}

**Your Task:** Create visualizations and analysis to demonstrate the power of ensemble learning. You'll need to create three key components:

### 1. The Power of More Trees Visualization

**Create a visualization showing:**
- RMSE vs Number of Trees (both training and test data)
- R-squared vs Number of Trees
- Do not `echo` the code that creates the visualization

**Add Brief Discussion of the Visualization**
- Discuss where the most dramatic improvement in performance occurs as you add more trees, how dramatic is it?
- Discuss diminishing returns as you add more trees

```{python}
#| label: power-of_trees-visualizationV1
#| echo: false
#| fig-width: 7
#| fig-height: 5
#| out.width: 90%

# Create the visualization showing the power of more trees
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7, 5))

# Plot 1: RMSE vs Number of Trees
ax1.plot(performance_df['Trees'], performance_df['RMSE_Train'], 'o-', label='Training RMSE', linewidth=2, markersize=6)
ax1.plot(performance_df['Trees'], performance_df['RMSE_Test'], 's-', label='Test RMSE', linewidth=2, markersize=6)
ax1.set_xlabel('Number of Trees')
ax1.set_ylabel('RMSE')
ax1.set_title('RMSE vs Number of Trees')
ax1.set_xscale('log')
ax1.grid(True, alpha=0.3)
ax1.legend()
ax1.set_xlim(0.8, 6000)

# Plot 2: R-squared vs Number of Trees
ax2.plot(performance_df['Trees'], performance_df['R_squared'], 'o-', color='green', linewidth=2, markersize=6)
ax2.set_xlabel('Number of Trees')
ax2.set_ylabel('R-squared')
ax2.set_title('R-squared vs Number of Trees')
ax2.set_xscale('log')
ax2.grid(True, alpha=0.3)
ax2.set_xlim(0.8, 6000)

plt.tight_layout()
plt.show()
```

The biggest performance gains occur when moving from 1 to 5 trees, with RMSE dropping significantly and R-squared improving substantially. Beyond 100 trees, improvements become marginal - the curves flatten out showing diminishing returns.

::: {.callout-important}
## üìä Visualization Requirements

Create two plots:
1. **RMSE Plot:** Show how RMSE decreases with more trees (both training and test)
2. **R-squared Plot:** Show how R-squared increases with more trees

Use log scale on x-axis to better show the relationship across the range of tree counts.
:::

The biggest performance gains occur when moving from 1 to 5 trees, with RMSE dropping significantly and R-squared improving substantially. Beyond 100 trees, improvements become marginal - the curves flatten out showing diminishing returns.

### 2. Overfitting Visualization and Analysis

**Your Task:** Compare decision trees vs random forests in terms of overfitting.

**Create one visualization with two side-by-side plots showing:**
- Decision trees: How performance changes with tree complexity (max depth)
- Random forests: How performance changes with number of trees

**Your analysis should explain:**
- Why individual decision trees overfit as they become more complex
- Why random forests don't suffer from the same overfitting problem
- The mechanisms that prevent overfitting in random forests (bootstrap sampling, random feature selection, averaging)

::: {.callout-important}
## üìä Overfitting Analysis Requirements

Create a side-by-side comparison showing:
1. **Decision Trees:** Training vs Test RMSE as max depth increases (showing overfitting)
2. **Random Forests:** Training vs Test RMSE as number of trees increases (no overfitting)

- Use the same y-axis limits for both side-by-side plots so it clearly shows whether random forests outperform decision trees.
- Do not `echo` the code that creates the visualization
:::

```{python}
#| label: overfitting-comparison
#| echo: false
#| fig-width: 7
#| fig-height: 5


from sklearn.tree import DecisionTreeRegressor
import matplotlib.pyplot as plt

# Create decision trees with different max depths
max_depths = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 15, 20]
dt_train_rmse = []
dt_test_rmse = []

for depth in max_depths:
    dt = DecisionTreeRegressor(max_depth=depth, random_state=123)
    dt.fit(X_train, y_train)
    
    train_pred = dt.predict(X_train)
    test_pred = dt.predict(X_test)
    
    dt_train_rmse.append(np.sqrt(mean_squared_error(y_train, train_pred)))
    dt_test_rmse.append(np.sqrt(mean_squared_error(y_test, test_pred)))

# Create side-by-side comparison
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(7, 5))

# Plot 1: Decision Trees - Overfitting
ax1.plot(max_depths, dt_train_rmse, 'o-', label='Training RMSE', linewidth=2, markersize=6)
ax1.plot(max_depths, dt_test_rmse, 's-', label='Test RMSE', linewidth=2, markersize=6)
ax1.set_xlabel('Max Depth')
ax1.set_ylabel('RMSE')
ax1.set_title('Decision Trees: Overfitting with Complexity')
ax1.grid(True, alpha=0.3)
ax1.legend()

# Plot 2: Random Forests - No Overfitting
ax2.plot(performance_df['Trees'], performance_df['RMSE_Train'], 'o-', label='Training RMSE', linewidth=2, markersize=6)
ax2.plot(performance_df['Trees'], performance_df['RMSE_Test'], 's-', label='Test RMSE', linewidth=2, markersize=6)
ax2.set_xlabel('Number of Trees')
ax2.set_ylabel('RMSE')
ax2.set_title('Random Forests: No Overfitting with More Trees')
ax2.set_xscale('log')
ax2.grid(True, alpha=0.3)
ax2.legend()

plt.tight_layout()
plt.show()
```

Decision trees show clear overfitting - training RMSE drops dramatically while test RMSE increases after depth 4, creating a growing gap. Random forests avoid this problem entirely - both training and test RMSE improve together as more trees are added, with no performance gap emerging.

### 3. Linear Regression vs Random Forest Comparison

**Your Task:** Compare random forests to linear regression baseline.

**Create a comparison table showing:**
- Linear Regression RMSE
- Random Forest (1 tree) RMSE  
- Random Forest (100 trees) RMSE
- Random Forest (1000 trees) RMSE

**Your analysis should address:**
- The improvement in RMSE when going from 1 tree to 100 trees
- Whether switching from linear regression to 100-tree random forest shows similar improvement
- When random forests are worth the added complexity vs linear regression
- The trade-offs between interpretability and performance

::: {.callout-important}
## üìä Comparison Requirements

Create a clear table comparing:

- Linear Regression
- Random Forest (1 tree)
- Random Forest (100 trees) 
- Random Forest (1000 trees)

Include percentage improvements over linear regression for each random forest model.
:::

```{python}
#| label: linear-regression-comparison
#| echo: false

from sklearn.linear_model import LinearRegression

# Fit linear regression model
lr = LinearRegression()
lr.fit(X_train, y_train)

# Get predictions
lr_train_pred = lr.predict(X_train)
lr_test_pred = lr.predict(X_test)

# Calculate RMSE
lr_train_rmse = np.sqrt(mean_squared_error(y_train, lr_train_pred))
lr_test_rmse = np.sqrt(mean_squared_error(y_test, lr_test_pred))

# Get RMSE values for random forests (from our previous analysis)
rf_1_test_rmse = rmse_1_test
rf_100_test_rmse = rmse_100_test
rf_1000_test_rmse = rmse_1000_test

# Create comparison table
comparison_data = {
    'Model': ['Linear Regression', 'Random Forest (1 tree)', 'Random Forest (100 trees)', 'Random Forest (1000 trees)'],
    'Test RMSE': [lr_test_rmse, rf_1_test_rmse, rf_100_test_rmse, rf_1000_test_rmse],
    'Improvement over Linear Regression': ['-', 
                                         f'{((lr_test_rmse - rf_1_test_rmse) / lr_test_rmse * 100):.1f}%',
                                         f'{((lr_test_rmse - rf_100_test_rmse) / lr_test_rmse * 100):.1f}%',
                                         f'{((lr_test_rmse - rf_1000_test_rmse) / lr_test_rmse * 100):.1f}%']
}

comparison_df = pd.DataFrame(comparison_data)
print(comparison_df.to_string(index=False))
```

The improvement from 1 tree to 100 trees is substantial - similar to switching from linear regression to a 100-tree random forest. Random forests are worth the complexity when you need better performance and can sacrifice interpretability. The trade-off is clear: linear regression is simple and interpretable but limited, while random forests capture complex patterns at the cost of interpretability.

## Challenge Requirements üìã

### Minimum Requirements for Any Points on Challenge

1. **Create a GitHub Pages Site:** Use the starter repository (see Repository Setup section below) to begin with a working template. The repository includes all the analysis code and visualizations above.  Use just one language for the analysis and visualizations, delete the other language and omit the panel tabsets.

2. **Add Analysis and Visualizations:** Complete the three analysis sections above with your own code and insights.

3. **GitHub Repository:** Use your forked repository (from the starter repository) named "randomForestChallenge" in your GitHub account.

4. **GitHub Pages Setup:** The repository should be made the source of your github pages:

   - Go to your repository settings (click the "Settings" tab in your GitHub repository)
   - Scroll down to the "Pages" section in the left sidebar
   - Under "Source", select "Deploy from a branch"
   - Choose "main" branch and "/ (root)" folder
   - Click "Save"
   - Your site will be available at: `https://[your-username].github.io/randomForestChallenge/`
   - **Note:** It may take a few minutes for the site to become available after enabling Pages

## Getting Started: Repository Setup üöÄ

::: {.callout-important}
## üìÅ Quick Start with Starter Repository

**Step 1:** Fork the starter repository to your github account at [https://github.com/flyaflya/randomForestChallenge.git](https://github.com/flyaflya/randomForestChallenge.git)

**Step 2:** Clone your fork locally using Cursor (or VS Code)

**Step 3:** You're ready to start! The repository includes pre-loaded data and a working template with all the analysis above.
:::

::: {.callout-tip}
## üí° Why Use the Starter Repository?

**Benefits:**

- **Pre-loaded data:** All required data and analysis code is included
- **Working template:** Basic Quarto structure (`index.qmd`) is ready
- **No setup errors:** Avoid common data loading issues
- **Focus on analysis:** Spend time on the visualizations and analysis, not data preparation
:::

### Getting Started Tips

::: {.callout-note}
## üéØ Navy SEALs Motto

> "Slow is Smooth and Smooth is Fast"

*Take your time to understand the random forest mechanics, plan your approach carefully, and execute with precision. Rushing through this challenge will only lead to errors and confusion.*
:::

::: {.callout-warning}
## üíæ Important: Save Your Work Frequently!

**Before you start:** Make sure to commit your work often using the Source Control panel in Cursor (Ctrl+Shift+G or Cmd+Shift+G). This prevents the AI from overwriting your progress and ensures you don't lose your work.

**Commit after each major step:**

- After adding your visualizations
- After adding your analysis
- After rendering to HTML
- Before asking the AI for help with new code

**How to commit:**

1. Open Source Control panel (Ctrl+Shift+G)
2. Stage your changes (+ button)
3. Write a descriptive commit message
4. Click the checkmark to commit

*Remember: Frequent commits are your safety net!*
:::

## Grading Rubric üéì

::: {.callout-important}
## üìä What You're Really Being Graded On

**This is an investigative report, not a coding exercise.** You're analyzing random forest models and reporting your findings like a professional analyst would. Think of this as a brief you'd write for a client or manager about the power of ensemble learning and when to use random forests vs simpler approaches.

**What makes a great report:**

- **Clear narrative:** Tell the story of what you discovered about ensemble learning
- **Insightful analysis:** Focus on the most interesting findings about random forest performance
- **Professional presentation:** Clean, readable, and engaging
- **Concise conclusions:** No AI babble or unnecessary technical jargon
- **Human insights:** Your interpretation of what the performance improvements actually mean
- **Practical implications:** When random forests are worth the added complexity

**What we're looking for:** A compelling 2-3 minute read that demonstrates both the power of ensemble learning and the importance of choosing the right tool for the job.
:::

### Questions to Answer for 75% Grade on Challenge

1. **Power of More Trees Analysis:** Provide a clear, well-reasoned analysis of how random forest performance improves with more trees. Your analysis should demonstrate understanding of ensemble learning principles and diminishing returns.

### Questions to Answer for 85% Grade on Challenge

2. **Overfitting Analysis:** Provide a thorough analysis comparing decision trees vs random forests in terms of overfitting. Your analysis should explain why individual trees overfit while random forests don't, and the mechanisms that prevent overfitting in ensemble methods.

### Questions to Answer for 95% Grade on Challenge

3. **Linear Regression Comparison:** Your analysis should include a clear comparison table and discussion of when random forests are worth the added complexity vs linear regression. Focus on practical implications for real-world applications.

### Questions to Answer for 100% Grade on Challenge

4. **Professional Presentation:** Your analysis should be written in a professional, engaging style that would be appropriate for a business audience. Use clear visualizations and focus on practical insights rather than technical jargon.

## Submission Checklist ‚úÖ

**Minimum Requirements (Required for Any Points):**

- [ ] Forked starter repository from [https://github.com/flyaflya/randomForestChallenge.git](https://github.com/flyaflya/randomForestChallenge.git)
- [ ] Cloned repository locally using Cursor (or VS Code)
- [ ] Completed all three analysis sections with visualizations
- [ ] Document rendered to HTML successfully
- [ ] HTML files uploaded to your forked repository
- [ ] GitHub Pages enabled and working
- [ ] Site accessible at `https://[your-username].github.io/randomForestChallenge/`

**75% Grade Requirements:**

- [ ] Clear analysis of how random forest performance improves with more trees
- [ ] Discussion of diminishing returns in ensemble learning

**85% Grade Requirements:**

- [ ] Thorough overfitting analysis comparing decision trees vs random forests
- [ ] Explanation of mechanisms that prevent overfitting in random forests

**95% Grade Requirements:**

- [ ] Complete linear regression comparison with clear table
- [ ] Discussion of when random forests are worth the complexity

**100% Grade Requirements:**

- [ ] Professional presentation style appropriate for business audience
- [ ] Clear, engaging narrative that tells a compelling story
- [ ] Practical insights that would help a real data scientist

**Report Quality (Critical for Higher Grades):**

- [ ] Clear, engaging narrative that tells a story
- [ ] Focus on the most interesting findings about ensemble learning
- [ ] Professional writing style (no AI-generated fluff)
- [ ] Concise analysis that gets to the point
- [ ] Practical insights that would help a real data scientist
- [ ] Well-designed visualizations that support your analysis

